<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Sublime</title>
      <link href="/2020/06/02/sublime/"/>
      <url>/2020/06/02/sublime/</url>
      
        <content type="html"><![CDATA[<p>| Sublime相关操作</p><a id="more"></a><h1 id="Sublime3-安装-破解-使用"><a href="#Sublime3-安装-破解-使用" class="headerlink" title="Sublime3 安装,破解,使用"></a>Sublime3 安装,破解,使用</h1><h2 id="1：-sublime下载"><a href="#1：-sublime下载" class="headerlink" title="1： sublime下载"></a>1： sublime下载</h2><p> 进入官网,下载<a href="https://www.sublimetext.com/3" target="_blank" rel="noopener">sublime</a>  </p><h2 id="2：-sublime破解"><a href="#2：-sublime破解" class="headerlink" title="2： sublime破解"></a>2： sublime破解</h2><ol><li><p>安装完成后，打开<code>Sublime</code></p></li><li><p>打开侧边栏：Help -&gt; Enter Lincense 输入以下许可证（3.2.1 目前我正在使用的这个注册码）</p></li></ol><pre class=" language-bash"><code class="language-bash">ZYNGA INC.50 User LicenseEA7E-811825927BA117 84C9300F 4A0CCBC4 34A56B44985E4562 59F2B63B CCCFF92F 0E646B830FD6487D 1507AE29 9CC4F9F5 0A6F32E30343D868 C18E2CD5 27641A71 25475648309705B3 E468DDC4 1B766A18 7952D28CE627DDBA 960A2153 69A2D98A C87C060745DC6049 8C04EC29 D18DFA40 442C680B1342224D 44D90641 33A3B9F2 46AADB8F</code></pre><ol start="3"><li>激活完成后显示(表明激活成功！！！)<br><img src="https://res.cloudinary.com/valent/image/upload/v1566374585/Blog/Sublime/sublime1_scajls.png" alt=""></li></ol><h2 id="3、安装Package-Control"><a href="#3、安装Package-Control" class="headerlink" title="3、安装Package Control"></a>3、安装Package Control</h2><p>   <code>Package Control</code>为插件管理包，所以我们首先要安装它。有了它，我们就可以很方便的浏览、安装和卸载Sublime Text中的插件。</p><ul><li>方法一<br>通过快捷键或者View &gt; Show Console菜单打开控制台，复制粘贴如下代码回车即可。</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> urllib.request,os,hashlib<span class="token punctuation">;</span> h <span class="token operator">=</span> <span class="token string">'6f4c264a24d933ce70df5dedcf1dcaee'</span> + <span class="token string">'ebe013ee18cced0ef93d5f746d80ef60'</span><span class="token punctuation">;</span> pf <span class="token operator">=</span> <span class="token string">'Package Control.sublime-package'</span><span class="token punctuation">;</span> ipp <span class="token operator">=</span> sublime.installed_packages_path<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> urllib.request.install_opener<span class="token punctuation">(</span> urllib.request.build_opener<span class="token punctuation">(</span> urllib.request.ProxyHandler<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> by <span class="token operator">=</span> urllib.request.urlopen<span class="token punctuation">(</span> <span class="token string">'http://packagecontrol.io/'</span> + pf.replace<span class="token punctuation">(</span><span class="token string">' '</span>, <span class="token string">'%20'</span><span class="token punctuation">))</span>.read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> dh <span class="token operator">=</span> hashlib.sha256<span class="token punctuation">(</span>by<span class="token punctuation">)</span>.hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> print<span class="token punctuation">(</span><span class="token string">'Error validating download (got %s instead of %s), please try manual install'</span> % <span class="token punctuation">(</span>dh, h<span class="token punctuation">))</span> <span class="token keyword">if</span> dh <span class="token operator">!=</span> h <span class="token keyword">else</span> open<span class="token punctuation">(</span>os.path.join<span class="token punctuation">(</span> ipp, pf<span class="token punctuation">)</span>, <span class="token string">'wb'</span> <span class="token punctuation">)</span>.write<span class="token punctuation">(</span>by<span class="token punctuation">)</span></code></pre><ul><li><p>方法二：Package Control源文件下载</p><p> 下载地址：<a href="https://github.com/wbond/package_control" target="_blank" rel="noopener"><code>package contro</code></a>  </p><p> 点击右上角的Clone or download按钮，然后选择Download ZIP</p><p> <img src="https://cdn.jsdelivr.net/gh/Emperortino/CDN2/img/sublime/1.png" alt="down"></p></li></ul><p>   1.将下载的ZIP文件解压，并重命名为Package Control，未重命名或重命名错误则会出现如下错误提示</p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566376245/Blog/Sublime/sublime3_ubv9r9.png" alt=""></p><p>   2.在菜单栏中点击Preferences &gt; Browe Packages…，打开一个文件夹，复制刚才的Package Control文件至此目录下。</p><p>   <img src="https://cdn.jsdelivr.net/gh/Emperortino/CDN2/img/sublime/2.png" alt="安装"></p><p>   3.在菜单中点击Preferences，若出现Package Settings和package control选项，就说明安装Package Control成功了。</p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566376376/Blog/Sublime/sublime5_c42pqu.png" alt=""></p><h3 id="1：-package-control使用失败"><a href="#1：-package-control使用失败" class="headerlink" title="1： package control使用失败"></a>1： package control使用失败</h3><ol><li><p>打开<code>Settings-User</code><br><img src="https://cdn.jsdelivr.net/gh/Emperortino/CDN2/img/sublime/3.png" alt="User"></p></li><li><p>添加如下内容<br><img src="https://cdn.jsdelivr.net/gh/Emperortino/CDN2/img/sublime/4.png" alt="channels"></p></li><li><p>也可以将channel文件下载下来，下面的路径则变为自己文件所在的路径</p></li><li><p>在菜单中点击<code>Preferences</code>，若出现<code>Package Settings</code>和<code>package control</code>选项，就说明安装<code>Package Control</code>成功了。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 破解 </tag>
            
            <tag> sublime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法设计与分析（二）</title>
      <link href="/2020/06/01/suan-fa-she-ji-yu-fen-xi-er/"/>
      <url>/2020/06/01/suan-fa-she-ji-yu-fen-xi-er/</url>
      
        <content type="html"><![CDATA[<p>| 算法与设计学习过程<br>| 坚持更新（使用JAVA语言）</p><h1 id="递归算法求解矩阵连乘"><a href="#递归算法求解矩阵连乘" class="headerlink" title="递归算法求解矩阵连乘"></a>递归算法求解矩阵连乘</h1><pre class=" language-bash"><code class="language-bash">/******************** 递归算法求解 ********************/int MatrixChain_Recursive<span class="token punctuation">(</span>int i, int j, int *p, int **s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span>        <span class="token keyword">return</span> 0<span class="token punctuation">;</span>    int u <span class="token operator">=</span> MatrixChain_Recursive<span class="token punctuation">(</span>i, i, p, s<span class="token punctuation">)</span> + MatrixChain_Recursive<span class="token punctuation">(</span>i + 1, j, p, s<span class="token punctuation">)</span> + p<span class="token punctuation">[</span>i - 1<span class="token punctuation">]</span> * p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> * p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>   s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int k <span class="token operator">=</span> i+1<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k++<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        int tmp <span class="token operator">=</span> MatrixChain_Recursive<span class="token punctuation">(</span>i, k, p, s<span class="token punctuation">)</span> + MatrixChain_Recursive<span class="token punctuation">(</span>k + 1, j, p, s<span class="token punctuation">)</span> + p<span class="token punctuation">[</span>i - 1<span class="token punctuation">]</span> * p<span class="token punctuation">[</span>k<span class="token punctuation">]</span> * p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">&lt;</span> u<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            u <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> u<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="动态规划算法"><a href="#动态规划算法" class="headerlink" title="动态规划算法"></a>动态规划算法</h1><pre class=" language-bash"><code class="language-bash">/******************** 动态规划算法 ********************/void MatrixChain_Dynamic<span class="token punctuation">(</span>int n, int *p, int **m, int **s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 1<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>        m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> 0<span class="token punctuation">;</span>             // l <span class="token operator">=</span> 1    <span class="token keyword">for</span> <span class="token punctuation">(</span>int r <span class="token operator">=</span> 2<span class="token punctuation">;</span> r <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> r++<span class="token punctuation">)</span> // l is the chain length, 自底向上！        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 1<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n -r + 1<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            int j <span class="token operator">=</span> r + i - 1<span class="token punctuation">;</span>            m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">[</span>i + 1<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> +p<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span>*p<span class="token punctuation">[</span>i<span class="token punctuation">]</span>*p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> //i,j分别对应矩阵链的首尾            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                                                       // k <span class="token operator">=</span> i            <span class="token keyword">for</span> <span class="token punctuation">(</span>int k <span class="token operator">=</span> i + 1<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k++<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                int t <span class="token operator">=</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> + m<span class="token punctuation">[</span>k + 1<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> + p<span class="token punctuation">[</span>i - 1<span class="token punctuation">]</span> * p<span class="token punctuation">[</span>k<span class="token punctuation">]</span> * p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>                    s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h1 id="备忘录算法"><a href="#备忘录算法" class="headerlink" title="备忘录算法"></a>备忘录算法</h1><pre class=" language-bash"><code class="language-bash">/******************** 备忘录法 ********************/int LookupChain<span class="token punctuation">(</span>int i,int j,int *p,int **m,int **s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> 0<span class="token punctuation">)</span>        <span class="token keyword">return</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span>        <span class="token keyword">return</span> 0<span class="token punctuation">;</span>    int u <span class="token operator">=</span> LookupChain<span class="token punctuation">(</span>i, i, p, m, s<span class="token punctuation">)</span> + LookupChain<span class="token punctuation">(</span>i + 1, j, p, m, s<span class="token punctuation">)</span> + p<span class="token punctuation">[</span>i - 1<span class="token punctuation">]</span> * p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> * p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int k <span class="token operator">=</span> i+1<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k++<span class="token punctuation">)</span>    <span class="token punctuation">{</span>       int tmp <span class="token operator">=</span> LookupChain<span class="token punctuation">(</span>i, k, p, m, s<span class="token punctuation">)</span> + LookupChain<span class="token punctuation">(</span>k + 1, j, p, m, s<span class="token punctuation">)</span> + p<span class="token punctuation">[</span>i - 1<span class="token punctuation">]</span> * p<span class="token punctuation">[</span>k<span class="token punctuation">]</span> * p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">&lt;</span> u<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            u <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>    <span class="token keyword">return</span> u<span class="token punctuation">;</span><span class="token punctuation">}</span>int MatrixChain_LookUp<span class="token punctuation">(</span>int i, int j, int n, int *p, int **m, int **s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int p <span class="token operator">=</span> 1<span class="token punctuation">;</span> p <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> p++<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int q <span class="token operator">=</span> 1<span class="token punctuation">;</span> q <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> q++<span class="token punctuation">)</span>            m<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>q<span class="token punctuation">]</span> <span class="token operator">=</span> 0<span class="token punctuation">;</span>    <span class="token keyword">return</span> LookupChain<span class="token punctuation">(</span>i, j, p, m, s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="构造最优解算法"><a href="#构造最优解算法" class="headerlink" title="构造最优解算法"></a>构造最优解算法</h1><pre class=" language-bash"><code class="language-bash">/*****************************************构造最优解***********************************************************/void Traceback<span class="token punctuation">(</span>int i, int j, int **s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A"</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"("</span><span class="token punctuation">;</span>        Traceback<span class="token punctuation">(</span>i, s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>, s<span class="token punctuation">)</span><span class="token punctuation">;</span>        Traceback<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> + 1, j, s<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h1><pre class=" language-bash"><code class="language-bash">int main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    int <span class="token keyword">select</span><span class="token punctuation">;</span>    int p<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>30,35,15,5,10,20,25<span class="token punctuation">}</span><span class="token punctuation">;</span>    int n <span class="token operator">=</span> sizeof<span class="token punctuation">(</span>p<span class="token punctuation">)</span> / sizeof<span class="token punctuation">(</span>*p<span class="token punctuation">)</span> - 1<span class="token punctuation">;</span>    int **m <span class="token operator">=</span> new int *<span class="token punctuation">[</span>n + 1<span class="token punctuation">]</span><span class="token punctuation">;</span>    int **s <span class="token operator">=</span> new int *<span class="token punctuation">[</span>n + 1<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 1<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        m<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> new int<span class="token punctuation">[</span>n + 1<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> new int<span class="token punctuation">[</span>n + 1<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    printf<span class="token punctuation">(</span><span class="token string">"*********动态规划算法*****\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    printf<span class="token punctuation">(</span><span class="token string">"******1.动态规划算法******\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    printf<span class="token punctuation">(</span><span class="token string">"******2.递归算法*********\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    printf<span class="token punctuation">(</span><span class="token string">"******3.备忘录算法*******\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    printf<span class="token punctuation">(</span><span class="token string">"*******0.退出************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    printf<span class="token punctuation">(</span><span class="token string">"*************************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    printf<span class="token punctuation">(</span><span class="token string">"请选择："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scanf<span class="token punctuation">(</span><span class="token string">"%d"</span>,<span class="token operator">&amp;</span>select<span class="token punctuation">)</span><span class="token punctuation">;</span>    if<span class="token punctuation">(</span>select<span class="token operator">=</span>1<span class="token punctuation">)</span> <span class="token punctuation">{</span> /******************** 动态规划算法********************/    cout<span class="token operator">&lt;&lt;</span><span class="token string">"动态规划算法"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最优值为："</span><span class="token punctuation">;</span>         MatrixChain_Dynamic<span class="token punctuation">(</span>n, p, m, s<span class="token punctuation">)</span><span class="token punctuation">;</span>         cout <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>         cout <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">[</span>5<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> if<span class="token punctuation">(</span>select<span class="token operator">=</span>2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        /******************** 递归算法求解 ********************/        cout<span class="token operator">&lt;&lt;</span><span class="token string">"递归算法求解"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最优值为："</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> MatrixChain_Recursive<span class="token punctuation">(</span>1, n, p, s<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> MatrixChain_Recursive<span class="token punctuation">(</span>2, 5, p, s<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>select<span class="token operator">=</span>3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            /******************** 备忘录算法 ********************/            cout<span class="token operator">&lt;&lt;</span><span class="token string">"备忘录算法"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最优值为："</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> MatrixChain_LookUp<span class="token punctuation">(</span>1, n, n, p, m, s<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> MatrixChain_LookUp<span class="token punctuation">(</span>2, 5, n, p, m, s<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> if<span class="token punctuation">(</span>select<span class="token operator">=</span>0<span class="token punctuation">)</span><span class="token punctuation">{</span>            exit<span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"最优解为："</span><span class="token punctuation">;</span>    Traceback<span class="token punctuation">(</span>1, n, s<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 1<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        delete<span class="token punctuation">[</span><span class="token punctuation">]</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        delete<span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    delete<span class="token punctuation">[</span><span class="token punctuation">]</span> m<span class="token punctuation">;</span>    delete<span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">;</span>    <span class="token keyword">return</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法设计与分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法设计与分析（一）</title>
      <link href="/2020/06/01/suan-fa-she-ji-yu-fen-xi-yi/"/>
      <url>/2020/06/01/suan-fa-she-ji-yu-fen-xi-yi/</url>
      
        <content type="html"><![CDATA[<p>| 算法与设计学习过程<br>| 坚持更新（使用JAVA语言）</p><h1 id="递归：实现汉诺塔问题"><a href="#递归：实现汉诺塔问题" class="headerlink" title="递归：实现汉诺塔问题"></a>递归：实现汉诺塔问题</h1><pre class=" language-bash"><code class="language-bash">public class Hannota <span class="token punctuation">{</span>    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        int N <span class="token operator">=</span> 3<span class="token punctuation">;</span>        Hanoi<span class="token punctuation">(</span><span class="token string">'A'</span>, <span class="token string">'B'</span>, <span class="token string">'C'</span>, N<span class="token punctuation">)</span><span class="token punctuation">;</span>      //使用    <span class="token punctuation">}</span>    public static void Hanoi<span class="token punctuation">(</span>char from, char inter, char to, int  N<span class="token punctuation">)</span> <span class="token punctuation">{</span>    //方法        <span class="token keyword">if</span> <span class="token punctuation">(</span>N <span class="token operator">==</span> 1<span class="token punctuation">)</span><span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"移动 1 从 "</span>+ from + <span class="token string">" 到 "</span> + to<span class="token punctuation">)</span><span class="token punctuation">;</span>  //只有一个的情况下         <span class="token punctuation">}</span>else <span class="token punctuation">{</span>            Hanoi<span class="token punctuation">(</span> from, to, inter, N - 1<span class="token punctuation">)</span><span class="token punctuation">;</span>             System.out.println<span class="token punctuation">(</span><span class="token string">"移动 "</span> + N + <span class="token string">" 从 "</span> + from + <span class="token string">" 到 "</span> + to<span class="token punctuation">)</span><span class="token punctuation">;</span>                     Hanoi<span class="token punctuation">(</span> inter, from, to, N - 1<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span>  </code></pre><h1 id="递归：实现排序问题"><a href="#递归：实现排序问题" class="headerlink" title="递归：实现排序问题"></a>递归：实现排序问题</h1><pre class=" language-bash"><code class="language-bash">public class Sort <span class="token punctuation">{</span>    public static int S<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> new int<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>1,2,3<span class="token punctuation">}</span><span class="token punctuation">;</span>    //定义一个数组s<span class="token punctuation">{</span>1,2,3<span class="token punctuation">}</span>    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        perm<span class="token punctuation">(</span>S,0,S.length-1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    private static void swap<span class="token punctuation">(</span>int i1, int i2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        int temp <span class="token operator">=</span> S<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">;</span>        S<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">;</span>        S<span class="token punctuation">[</span>i1<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public static void perm<span class="token punctuation">(</span>int arr<span class="token punctuation">[</span><span class="token punctuation">]</span>, int begin,int end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        if<span class="token punctuation">(</span>end<span class="token operator">==</span>begin<span class="token punctuation">)</span><span class="token punctuation">{</span>            //一到递归的出口就输出数组，此数组为全排列            for<span class="token punctuation">(</span>int i<span class="token operator">=</span>0<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>end<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>            System.out.print<span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>+<span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>            System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        else<span class="token punctuation">{</span>            for<span class="token punctuation">(</span>int j<span class="token operator">=</span>begin<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>end<span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>                    swap<span class="token punctuation">(</span>begin,j<span class="token punctuation">)</span><span class="token punctuation">;</span>        //for循环将begin~end中的每个数放到begin位置中去                perm<span class="token punctuation">(</span>arr,begin+1,end<span class="token punctuation">)</span><span class="token punctuation">;</span>    //假设begin位置确定，那么对begin+1~end中的数继续递归     //递归                swap<span class="token punctuation">(</span>begin,j<span class="token punctuation">)</span><span class="token punctuation">;</span>        //换过去后再还原            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="分治：递归实现的快速排序"><a href="#分治：递归实现的快速排序" class="headerlink" title="分治：递归实现的快速排序"></a>分治：递归实现的快速排序</h1><pre class=" language-bash"><code class="language-bash">public class Quicksort <span class="token punctuation">{</span>    /**     * @param args     */    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        int<span class="token punctuation">[</span><span class="token punctuation">]</span> src <span class="token operator">=</span> <span class="token punctuation">{</span>7, 9, 2, 3, 6, 5, 4, 1, 8, 10<span class="token punctuation">}</span><span class="token punctuation">;</span>        System.out.print<span class="token punctuation">(</span><span class="token string">"原数组为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token keyword">:</span> src<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System.out.print<span class="token punctuation">(</span><span class="token string">" "</span> + i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System.out.print<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        quickSort<span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.print<span class="token punctuation">(</span><span class="token string">"现数组为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token keyword">:</span> src<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System.out.print<span class="token punctuation">(</span><span class="token string">" "</span> + i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    /**     * 对整个源数组进行快速排序     * @param src     * @return     */    public static void quickSort<span class="token punctuation">(</span>int<span class="token punctuation">[</span><span class="token punctuation">]</span> src<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sortPartision<span class="token punctuation">(</span>src, 0, src.length - 1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    /**     * 排序分治区域       * @param src     * @param start     * @param end     */    private static void sortPartision<span class="token punctuation">(</span>int<span class="token punctuation">[</span><span class="token punctuation">]</span> src, int start, int end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        int i <span class="token operator">=</span> start<span class="token punctuation">;</span>    //将开始赋值给i         int r <span class="token operator">=</span> end<span class="token punctuation">;</span>         //将结尾赋值给r        int x <span class="token operator">=</span> src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> src<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                r--<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                src<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>                i++<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> src<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                i++<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                src<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                r--<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        src<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        int I <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>I <span class="token operator">></span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sortPartision<span class="token punctuation">(</span>src, start, I-1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>I <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sortPartision<span class="token punctuation">(</span>src, I+1, end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="分治：递归实现的合并排序"><a href="#分治：递归实现的合并排序" class="headerlink" title="分治：递归实现的合并排序"></a>分治：递归实现的合并排序</h1><pre class=" language-bash"><code class="language-bash">public class Mergesort <span class="token punctuation">{</span>    static int arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>100, 20, 15, 30, 5, 75, 40, 12, 514<span class="token punctuation">}</span><span class="token punctuation">;</span>  //定义排序前的一个是数组    public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"数据排序之前 ： "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        // 排序前打印数组        printArray<span class="token punctuation">(</span>arr, 0, arr.length - 1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"-----------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        // 用递归实现排序        mergeSort<span class="token punctuation">(</span>0, arr.length - 1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"-----------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        // 排序后打印数组        System.out.println<span class="token punctuation">(</span><span class="token string">"排序后打印数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        printArray<span class="token punctuation">(</span>arr, 0, arr.length - 1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    /**     * 用于合并排序的递归算法     *     * @param start     * @param end     */    public static void mergeSort<span class="token punctuation">(</span>int start, int end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        int mid <span class="token operator">=</span> <span class="token punctuation">(</span>start + end<span class="token punctuation">)</span> / 2<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            // 排序左半部分            mergeSort<span class="token punctuation">(</span>start, mid<span class="token punctuation">)</span><span class="token punctuation">;</span>            // 排序右半部分            mergeSort<span class="token punctuation">(</span>mid + 1, end<span class="token punctuation">)</span><span class="token punctuation">;</span>            // 合并左右两半            merge<span class="token punctuation">(</span>start, mid, end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    /**     * @param start     * @param mid     * @param end     */    private static void merge<span class="token punctuation">(</span>int start, int mid, int end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        // 初始化临时数组和索引        int<span class="token punctuation">[</span><span class="token punctuation">]</span> tempArray <span class="token operator">=</span> new int<span class="token punctuation">[</span>arr.length<span class="token punctuation">]</span><span class="token punctuation">;</span>        int tempArrayIndex <span class="token operator">=</span> start<span class="token punctuation">;</span>        System.out.print<span class="token punctuation">(</span><span class="token string">"合并前:  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        printArray<span class="token punctuation">(</span>arr, start, end<span class="token punctuation">)</span><span class="token punctuation">;</span>        int startIndex <span class="token operator">=</span> start<span class="token punctuation">;</span>        int midIndex <span class="token operator">=</span> mid + 1<span class="token punctuation">;</span>        // 它将迭代直到较小的列表到达结尾        <span class="token keyword">while</span> <span class="token punctuation">(</span>startIndex <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> midIndex <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>startIndex<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>midIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                tempArray<span class="token punctuation">[</span>tempArrayIndex++<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>startIndex++<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                tempArray<span class="token punctuation">[</span>tempArrayIndex++<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>midIndex++<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        // 复制剩余的元素        <span class="token keyword">while</span> <span class="token punctuation">(</span>startIndex <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tempArray<span class="token punctuation">[</span>tempArrayIndex++<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>startIndex++<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>midIndex <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tempArray<span class="token punctuation">[</span>tempArrayIndex++<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>midIndex++<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        // 排序后将tempArray复制到实际数组        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tempArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System.out.print<span class="token punctuation">(</span><span class="token string">"合并后:   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        printArray<span class="token punctuation">(</span>tempArray, start, end<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    /**     * 打印数组     *     * @param arr   传入的数组     * @param start 遍历开始的位置     * @param end   遍历结束的位置     */    public static void printArray<span class="token punctuation">(</span>int arr<span class="token punctuation">[</span><span class="token punctuation">]</span>, int start, int end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            System.out.print<span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> + <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法设计与分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sandboxie破解</title>
      <link href="/2020/05/21/sandboxie-po-jie/"/>
      <url>/2020/05/21/sandboxie-po-jie/</url>
      
        <content type="html"><![CDATA[<p>| Sandboxie安装及破解<br>| 仅供学习使用,请支持正版！！！    </p><h2 id="Sandboxie-安装及破解"><a href="#Sandboxie-安装及破解" class="headerlink" title="Sandboxie 安装及破解"></a><center><font size="+2"><code>Sandboxie 安装及破解</code></font></center></h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>   1.点击进入<a href="https://www.sandboxie.com/DownloadSandboxie" target="_blank" rel="noopener">下载界面</a></p><p>   2.点击如下图位置进行下载</p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566457584/Blog/Sandboxie/Sandboxie1_qgzwni.png" alt="">  </p><p>   3.进入我的<a href="https://pan.baidu.com/s/1HRKs9rSNBD_3fg-zEx6hmA" target="_blank" rel="noopener">百度云</a>进行下<code>载驱动文件</code>以及<code>注册机</code>（选择合适驱动文件）</p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566458554/Blog/Sandboxie/Sandboxie2_mpoyuj.png" alt=""> </p><h3 id="安装、破解"><a href="#安装、破解" class="headerlink" title="安装、破解"></a>安装、破解</h3><p>   1.点击安装包进行安装  </p><p>   2.语言随你喜好（可任选） </p><p>   3.选择合适的<code>安装位置</code>并记住（等会要用到） </p><p>   4.安装完后不要点击下一步，这时候找到我们的<code>安装目录</code>，将我们之前下载驱动文件放入根目录,直接进行<code>覆盖</code></p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566458772/Blog/Sandboxie/Sandboxie3_au8ogr.png" alt=""></p><p>   5.弄完上一步后把安装程序接着完成，然后以管理员运行我们之前下载的注册机 </p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566459634/Blog/Sandboxie/Sandboxie4_hop6mc.png" alt=""> </p><p>   6.首先<code>指定</code>你的安装路径，然后<code>获取</code>你的安装版本，再<code>计算</code>机器码，输入你想要的<code>注册期限</code>,最后点击开始注册即可破解成功！！！  </p><p>   7.以下是我的配置（我现在的是最新版本，安装路径是我自定义的，最后注册期限为2099-08-22 相当于无限使用</p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566460053/Blog/Sandboxie/Sandboxie6_rmmbnb.png" alt=""> </p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566460102/Blog/Sandboxie/Sandboxie5_qrvtbo.png" alt=""> </p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566460054/Blog/Sandboxie/Sandboxie7_xy1qqo.png" alt=""> </p><p>   8.最后进入软件，帮助-&gt;关于 显示注册信息</p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566460355/Blog/Sandboxie/Sandboxie8_fma0nx.png" alt=""> </p><hr>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 破解 </tag>
            
            <tag> Sandboxie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习（一）</title>
      <link href="/2020/05/20/linux-xue-xi-yi/"/>
      <url>/2020/05/20/linux-xue-xi-yi/</url>
      
        <content type="html"><![CDATA[<p>| Linux学习过程<br>| 坚持更新  </p><h1 id="Linux系统安装（vm虚拟机安装）"><a href="#Linux系统安装（vm虚拟机安装）" class="headerlink" title="Linux系统安装（vm虚拟机安装）"></a>Linux系统安装（vm虚拟机安装）</h1><h2 id="IOS镜像下载"><a href="#IOS镜像下载" class="headerlink" title="IOS镜像下载"></a>IOS镜像下载</h2><p>   1.<a href="https://www.linux.org/pages/download/" target="_blank" rel="noopener">官方网站</a>镜像下载（需要翻墙）<br>   2.<a href="https://linux.cn/share/distro/" target="_blank" rel="noopener">Linux中国</a>镜像下载（无需翻墙）<br>   3.或者自己找到镜像网站，进行下载  </p><h2 id="VM虚拟机下载"><a href="#VM虚拟机下载" class="headerlink" title="VM虚拟机下载"></a>VM虚拟机下载</h2><p>   1.<a href="https://my.vmware.com/cn/web/vmware/info/slug/desktop_end_user_computing/vmware_workstation_pro/15_0" target="_blank" rel="noopener">vm15-官网</a>下载<br>   2.下载后自行安装  </p><h2 id="ISO镜像VM安装（此处以kaili-Linux为例）"><a href="#ISO镜像VM安装（此处以kaili-Linux为例）" class="headerlink" title="ISO镜像VM安装（此处以kaili Linux为例）"></a>ISO镜像VM安装（此处以kaili Linux为例）</h2><p>   1.创建新的虚拟机（个人一般选择自定义）<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567515573/Blog/Linux/Linux%28%E4%B8%80%29/Linux1_sdts62.png" alt=""><br>   2.点击下一步<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567516398/Blog/Linux/Linux%28%E4%B8%80%29/Linux2_bkzuhm.png" alt=""><br>   3.没有检测到Linux（选择稍后安装）<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567517856/Blog/Linux/Linux%28%E4%B8%80%29/Linux3_qutwnd.png" alt=""><br>   4.Kaili-Linux选择Deblan (选择你镜像的版本)<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567517856/Blog/Linux/Linux%28%E4%B8%80%29/Linux4_zwrgl3.png" alt=""><br>   5.选择存储位置和名称<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567517856/Blog/Linux/Linux%28%E4%B8%80%29/Linux5_xvcqof.png" alt=""><br>   6.选择适合你的配置<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567517856/Blog/Linux/Linux%28%E4%B8%80%29/Linux6_d8pzbn.png" alt=""><br>   7.根据自己电脑配置，自行选择<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567517856/Blog/Linux/Linux%28%E4%B8%80%29/Linux7_ft0k9y.png" alt=""><br>   8.自行选择（个人选择 桥接模式）<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567517856/Blog/Linux/Linux%28%E4%B8%80%29/Linux8_hbf0rs.png" alt=""><br>   9.默认配置即可<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567517856/Blog/Linux/Linux%28%E4%B8%80%29/Linux9_lbqpzv.png" alt=""><br>   10.默认配置即可<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567517857/Blog/Linux/Linux%28%E4%B8%80%29/Linux10_c7fyoa.png" alt=""><br>   11.创建新的虚拟磁盘即可<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567517857/Blog/Linux/Linux%28%E4%B8%80%29/Linux11_lf6clq.png" alt=""><br>   12.按需求设置<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567517857/Blog/Linux/Linux%28%E4%B8%80%29/Linux12_ceuwcw.png" alt=""><br>   13.配置完成，接下来开始安装  </p><h2 id="开始虚拟系统安装配置"><a href="#开始虚拟系统安装配置" class="headerlink" title="开始虚拟系统安装配置"></a>开始虚拟系统安装配置</h2><p>   1.选择Graphical install(图形安装)<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524302/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-1_sc1ki4.png" alt=""><br>   2.选择系统语言<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524301/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-2_htofwj.png" alt=""><br>   3.选择国家地区<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524303/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-3_qvdbzo.png" alt=""><br>   4.配置键盘<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524302/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-4_zie6qs.png" alt=""><br>   5.输入自己想要的主机名，也可以点击继续跳过<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524302/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-5_eyhe4m.png" alt=""><br>   6.配置域名（可跳过）<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524302/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-6_xxjtnd.png" alt=""><br>   7.设置用户密码<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524303/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-7_hbwxr0.png" alt=""><br>   8.磁盘分区（新手推荐选择第一个）<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524303/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-8_ybtypj.png" alt=""><br>   9.按步骤走<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524304/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-9_weeh6k.png" alt=""><br>   10.按步骤走（可以根据自己的喜好配置）<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524303/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-10_bnpav6.png" alt=""><br>   11.结束分区<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524340/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-11_e2jbrn.png" alt=""><br>   12.确定修改<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524339/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-12_pcftpa.png" alt=""><br>   13.<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524303/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-13_xsmumy.png" alt=""><br>   14.将GRUB安装至硬盘<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524307/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-14_yu1efo.png" alt=""><br>   15.默认设备<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524305/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-15._js0ce4.png" alt=""><br>   16.安装完成<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524306/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-16_p3idkv.png" alt=""><br>   17.用户名初始为root<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524305/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-17_vcpz2b.png" alt=""><br>   18.填入自己之前填的密码<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524306/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-18_er7alo.png" alt=""><br>   19.出现以下界面，则表明系统安装完成<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524338/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-19_pujrrp.png" alt=""></p><hr>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JET-BRAINS 软件破解</title>
      <link href="/2020/05/19/intellij-ruan-jian-po-jie/"/>
      <url>/2020/05/19/intellij-ruan-jian-po-jie/</url>
      
        <content type="html"><![CDATA[<p>| JET-BRAINS 软件破解教程<br>| 仅供学习使用，请支持正版！！！  </p><h1 id="JET-BRAINS软件永久破解（这里以IDEA为例子）"><a href="#JET-BRAINS软件永久破解（这里以IDEA为例子）" class="headerlink" title="JET-BRAINS软件永久破解（这里以IDEA为例子）"></a>JET-BRAINS软件永久破解（这里以<code>IDEA</code>为例子）</h1><h2 id="下载安装-2019-2-X版本"><a href="#下载安装-2019-2-X版本" class="headerlink" title="下载安装(2019 2.X版本)"></a>下载安装(2019 2.X版本)</h2><p>  1.进入<a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">官网</a>进行下载IDEA最新版本 </p><p>  2.下载完成后按步骤安装即可  </p><h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><p>   1.进入我的<a href="https://pan.baidu.com/s/1UHxUZzOpaUqk5rx5xwpQ9w" target="_blank" rel="noopener">百度云</a>，下载<code>破解补丁</code></p><p>   2.将破解补丁放在一个没有中文的目录中 如：D:--Code–\JET-BRAINS\JET\jetbrains-agent.jar  (这是我的存放目录)</p><p>   3.进入IDEA的bin目录 分别打开<code>idea.exe.vmoptions</code>、<code>idea64.exe.vmoptions</code>在最后面添加-javaagent:D:--Code–\JET-BRAINS\JET\jetbrains-agent.jar（后面的路径为你保存破解补丁的位置）   </p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566545071/Blog/JET-BRAINS/IDEA/IDEA_vhbtgw.png" alt=""></p><p>   4.添加完成后进入软件，选择使用<code>Evaluate for free</code></p><p>   5.选择 <code>Configure - Edit Custom VM Options</code>，在弹出的窗口确定末尾是刚刚修改的 -javaagent:-javaagent:D:--Code–\JET-BRAINS\JET\jetbrains-agent.jar （如果提示创建，选择是，在末尾再添加上面的参数）</p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566545701/Blog/JET-BRAINS/IDEA/IDEA1_rabkjs.png" alt="">  </p><p>   以下结果显示的，就是我刚刚添加的</p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566545701/Blog/JET-BRAINS/IDEA/IDEA2_esnfvo.png" alt=""></p><p>   6.选择 <code>Manage License</code>， License Server 填写  <a href="http://jetbrains-license-server" target="_blank" rel="noopener">http://jetbrains-license-server</a>  点击Activate</p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566546375/Blog/JET-BRAINS/IDEA/IDEA3_yejepj.png" alt=""></p><p>   7.重启你的 IDEA ,看下是否已经<span id="post-red">破解成功</span></p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566546535/Blog/JET-BRAINS/IDEA/IDEA4_e9tdo9.png" alt=""></p><p>   8.没有显示授权日期，也能正常使用，稳定奔现！！！</p><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>   1.如果第 6 步提示激活不了的朋友们，打开 Windows 的 hosts 文件，路径一般在 C:\Windows\System32\drivers\etc 下，在末尾加上</p><pre class=" language-bash"><code class="language-bash">0.0.0.0 account.jetbrains.com</code></pre><p>   然后保存再点击激活</p><p>   2.其它<code>JET-BRAINS软件</code>破解也是与IDEA破解步骤一样  </p><h1 id="JetBrains-系列软件汉化包"><a href="#JetBrains-系列软件汉化包" class="headerlink" title="JetBrains 系列软件汉化包"></a>JetBrains 系列软件汉化包</h1><p>   1.进入我的<a href="https://pan.baidu.com/s/1-AmIq6npwTY44wuTJ1v7lg" target="_blank" rel="noopener">百度云</a>下载JetBrains 系列软件汉化包  </p><p>   2.进入JetBrains 软件安装目录的<code>lib</code>目录 </p><p>   3.放入适合你版本的安装包，重启软件，即可汉化完成！！！</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JET-BRAINS </tag>
            
            <tag> 破解 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
